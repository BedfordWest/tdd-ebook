<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Practicing what we already learned</title>
</head>

<body>
  <blockquote>
    <p>And now, a taste of things to come!</p>

    <p>- Shang Tsung, Mortal Kombat The Movie</p>
  </blockquote>

  <p>The above quote took place just before a fighting scene in which a nameless warrior jumped at Sub-Zero only to be frozen and broken into multiple pieces upon hitting the wall. The scene was not spectacular in terms of fighting technique or length. Also, the nameless guy didn't even try hard - the only thing he did was to jump only to be hit by a freezing ball, which, by the way, he actually saw coming. It looked a lot like the fight was set up only to showcase Sub-Zero's freezing ability. Guess what? In this chapter, we're gonna do roughly the same thing!</p>

  <p>The previous chapter was filled with a lot of theory and philosophy, don't you think? I really hope you didn't fall asleep reading it. To tell you the truth, we've got some more theory yet to grasp until we are really able to write real-world applications using TDD. To compensate for this somehow, I propose we make a side trip from the trial and try what we already learned on a quick and easy example. As we go through the example, you might wonder how on earth could you possibly write real applications the way we'll write our simple program. Don't worry, I didn't introduce all the tricks yet, so treat it as a taste of things to come. So the example will be as close to real world problems as the fight between Sub-Zero and nameless ninja was to real martial arts fight. The goal is to showcase some key elements of TDD process.</p>

  <h2>Expanded TDD process</h2>

  <p>As a little introduction, I'll show you an expanded version of TDD flow that we'll be using:</p>

  <ol>
    <li>Examine TODO list and pick an item that makes most sense to implement next</li>

    <li>Write unfulfilled Statement</li>

    <li>Make it unfulfilled for the right reason</li>

    <li>Fulfill the Statement and make sure all already fulfilled Statements are still fulfilled</li>

    <li>Cross out the item from TODO list</li>

    <li>Repeat until no item is left on the TODO list</li>
  </ol>

  <p>Some of the steps don't probably mean anything to yet. Don't worry, we'll be reiterating them several times, so don't try to memorize them now.</p>

  <h2>A TODO list</h2>

  <p>One interesting thing to note when we look at the steps above is that we'll be maintaining a TODO list. What is it for? You'll have to see for yourself! The only thing that I'd like to tell you up-front is that the process above doesn't include a step where you add something to the TODO list. This is because you're free to expand your TODO list anytime. This can even be halfway writing your current Statement that an idea or a new behavior occurs to you. In such situation, not get distracted from your current task, you add the new item to the TODO list and get back to it later (hence the step 1 of this process).</p>
</body>
</html>
