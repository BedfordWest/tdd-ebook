<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
</head>

<body>
  <h1>Motivation</h1>

  <p>So, you want to learn TDD, huh? First off, let me ask the question 'why?'.</p>

  <p>I'll tell you a story - some years ago, I had an apprentice, who wanted to learn TDD as well. We started working on a small project together for him to grasp the necessary skills through practice, with me sitting next to him, providing guidance. He showed up three, four times, then he resigned, having 'more urgent things' and 'no time'. Since then, he did not progress in TDD at all. Did he really want to learn?</p>

  <p>See, sometimes people don't really want to learn something. Sometimes they think they need to do it for whatever reasons - promotion at work, gaining a certificate, add something to CV or just 'stay up to date' with recent hypes, one of them being Test-Driven Development.</p>

  <p>I also met people that wanted to learn TDD for reasons they themselves made up. TDD is trendy, so many people want to try it just because of that, hoping it will magically "work" and they will magically "get it" and see the benefit as soon as they start using it. In the meantime, they make up some justifications why their team should switch to TDD. When put this way, TDD becomes an example of cargo cult. I myself heard many of those rationale in the past, starting with "better coverage" and ending on "more tight testing net". No wonder they have hard times convincing their bosses and teammates, since when you put TDD just as a testing technique, it must compete with other kinds of testing, like smoke tests, sanity tests, exploration tests, usability tests etc. It gets really hard to prove that the money should be spent on TDD, not on those other things.</p>

  <p>If that's how you understand TDD, you'll probably waste a lot of time chasing goals that can be more easily achieved by other means and that are not as relevant as you may have initially thought.</p>

  <p>So, it boils down to these two questions: Do you really want TDD? and How much do you want it?</p>

  <h1>Do you really want TDD?</h1>

  <p>What then is the right reason to learn TDD? TOOOOOOOOOOOODOOOOOOOOOOODODODODODO</p>

  <h1>How much do you want it?</h1>

  <p>If you really want to learn TDD, I need you to be highly motivated. As some say, TDD is "easy to learn, hard to master". It's not enough that you approach a book or a blog. You need to get into it, search the net, draw conclusions, discuss, discover.</p>

  <p>Me and my brother liked to play video games in our childhood - one of the most memorable being Tekken 3 - a japanese tournament beat'em up for Sony Playstation. To finish the game with all warriors, unlock all hidden characters, mini-games etc. would took about a day. Some would say the game had nothing to offer since then. Why then did we spend over a year on it?</p>

  <p>It's because each fighter in the game had a lot of combos, kicks and punches that could be mixed in a variety of ways. Some were only usable in some situations, others were something you could throw at your opponent almost anytime without a big risk of being exposed to counterattacks. You could side-step to evade enemy's attacks and, most of all, you could kick another fighter up in the air where they could not block your attacks and land some nice attacks on them before they fell down. These in-the-air techniques were called "juggles". There were magazines that published a list of new possible juggles each month and the hype stayed in the gaming community for over a year.</p>

  <p>Yes, Tekken was easy to learn - you could put one hour into training the core moves of a character and then be able to "use them", but what made you a great fighter was the experience and knowledge on which techniques were risky or not, which ones could be used in which situations, which ones, if used one after another, gave the opponent little chance to counterattack etc. No wonder that soon, many tournaments sprang, where players could clash with other players for glory, fame and rewards.</p>

  <p>TDD is like Tekken. You've probably heard the mantra "red-green-refactor" or the general advice "write your test first, then the code", maybe you even did some experiments on your own where you were trying to implement a bubble-sort algorithm or other simple stuff by starting with a test. But that's all like practicing Tekken and trying out each move on its own on dummy opponent, without the context of real-world issues that make the fight really challenging. And while I think such exercises are (somewhat) useful, you need to understand the bigger picture.</p>

  <p>Some people I talk to about TDD sum up the lecture as "That's really demotivating - there are so many things I have to watch out for that it makes me never want to start!". Easy, don't panic - remember the first time you tried to ride a bike - you must've been really far back then from knowing traffic regulations and following road signs, but that didn't really demotivate you, did it? And, while being still far from mastery, could you already do something that brought you value? Of course! And what fun it was!</p>

  <p>I myself found learning TDD very exciting. Some guys in my age (and I'm not that old!) already think they know all about coding, are bored with it and can't wait until they move to management or analysis, but hey! I have a new technique that makes my coding career challenging again! And it's not something I can use only after I pay to Microsoft or Oracle or anybody else - it's quite portable, making me a better developer overall!</p>
</body>
</html>
