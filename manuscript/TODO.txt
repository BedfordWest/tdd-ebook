
### behavior scope vs class scope

There is no decisive answer to the second question as well. A behavior may span several classes (in part 2 of this book I'll tell you how I decide which classes should be included in such Statementand which should not) and a single class may contain many behaviors. 

As an example, let's imagine we have a class that represents a telecom call (in this case, it's a digital call). Let's call it  `DigitalCall`. Instances of this class can be used to start and monitor the status of a real call as well as transmit a voice frame over the wire.

Now, a Statement with a class scope for a `DigitalCall` class would look like this:

```csharp
[Fact] public void
ShouldReportItIsStartedAndItDoesNotYetTransmitVoiceWhenItStarts()
{
  //GIVEN
  var call = new DigitalCall();
  call.Start();
 
  //WHEN
  var callStarted = call.IsStarted;
  
  //THEN 
  Assert.True(callStarted);

  //WHEN-THEN - second behavior
  Assert.Throws<Exception>(
    () => call.Transmit(Any.InstanceOf<Frame>())
  );
}
```

Again, there are two behaviors here: reporting the call status after it's started and not being able to transmit voice frames after start. That's why this test should be split into two.

## How do we know we specify more than one behavior?

I don't know a strict answer to this question. In the end, there are always some cases where I have a dillema. Still, there are some guidelines that help me make my decision most of the time.

1. Take a look at the test name -- if it looks strange (e.g. is very long or very generic) and contains some "And" or "Or" words, it may (but does not have to) be about more than one behavior. 
2. You can try to write (or imagine) the description of a behavior in a Given-When-Then way. If you have more than one item in the "When" section or the structure is not Given-When-Then, but rather a "Given-When-Then-When-Then" -- that is also a signal.
3. If we have a Statement that specifies several behaviors, the whole Specification usually violates the three  


//TODO three rules cited by ken pugh from Amir Kolsky
//a test should fail for well-defined reason
//no other test should fail for the same reason
//a test should not fail for any other reason

//////////////////////////////////////////////////////////////////////////////////


## Law of Demeter

As we discovered, exposing return values makes the protocols more complex and should be avoided if possible. TODO do we need this at all?

Law of Demeter. Coupling to details of return values.

Size of protocols. Even interface with a single method can return a lot of values. Example: different reports produced.

## Context independence

## Instead of pulling the data where context is, pass the context where the data is

TODO move this earlier in the chapter

If you are like me, you probably learned programming starting from
procedural languages.

this may sound like something non obvious

1.  data - the information
2.  context - what we want to do with information

e.g. for employees:

1.  data - employee name surname etc.
2.  context - we want to print it on the screen

TODO example: with employees loop getters refactoring

May be more coupling, but the coupling is very light - just an abstract interface, especially if we were following the rest guidelines. On the other hand, better information hiding and decoupling users from details.

#### Protocols should rely on abstractions

e.g. Id abstraction can be either in or string or a combination of those. The protocol stays stable regardless of these changes

Plural is also an abstraction
--------------------------------

TODO

## Avoid statics


#### Interactions are not an implementation detail

Todo interfaces checked by compiler, protocols not

### multiple interfaces multiple roles

Protocols must be published! They are not private internal details


TOOODOOO

Why did I leave out inline creation and singletons? context independence!
-------------------------------------------------------------------------

1.  composability - learned from previous chapters
2.  what does it mean to compose - obtain reference. Plug objects
    together - show UML version of composition first, then the version
    with "plugs".
3.  composability long term (through constructor or setter) or short
    term (through parameter)?
4.  composability - strong or weak a) class vs interface, b)(continuum
    -public field, getter, method that does something)
5.  In order to compose - Protocols vs interfaces
6.  Abstract protocols are better
7.  web of composable objects - like a real web - metaphor (when?)
8.  Tell Don't Ask (when?)
9.  Why not events? Roles!!!
10. discover interfaces - from inside or outside?
11. need driven development


1. In interfaces chapter - provide better examples in roles section (use some more real examples)
3. change many single hyphens to double

## No work in constructors

A constructor of a class should do little or no work. This is a conclusion from Single Responsibility Principle which also enhances composability.

If, aside from implementing the methods a class exposes, you feel you need to do additional work in a constructor, that may be a sign that this "additional work" changes for other reason than the main logic of the class. Thus it should be put elsewhere.



### What can a constructor do?

Most of the times, we can get away using the following guideline: assigning fields or null checks. 

### What a constructor cannot do?

if it does too much, it means it's a separate responsibility. Move it to the factory.



TODO give open connection instead of opening it in constructor
TODO validation - put in factories, except nulls - an object requires valid peers.
http://misko.hevery.com/code-reviewers-guide/flaw-constructor-does-real-work/

TODO small amount of private methods

# DSL chapter

%% ### Hide irrelevant parts of composition - few levels of composition code is enough
%% 1.  Factory method & method composition
%% 1.  Method chaining - expression builders build up context
%% 1.  variable as terminator ??? Explaining variables - for sharing
%% 1.  Explaining method (i.e. returns its argument. Use with care)


# Value objects

## Value objects as dividing a domain space

When talking about objects that were playing roles, sending messages and implementing interfaces, we talked a lot about making the protocols as abstract as possible and  

Todo: interfaces let us treat related objects the same, and values let us separate unrelated objects.

TODO for values we don't use mocks

TODO  It looks like the effort on creating such a wrapper around just one value is huge, however, most of the methods are straightforward and others can be auto-generated by an IDE (like Equals(), GetHashCode() and equality operators). Or there are some libraries based on reflection.

passing multiple strings can cause the order of the arguments to be confused, treating time as integer, Title type instead of strings or utils.

